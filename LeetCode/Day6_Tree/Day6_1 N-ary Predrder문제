

# Given the root of an n-ary tree, return the preorder traversal of its nodes' values.

# Nary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)

 

# Example 1:



# Input: root = [1,null,3,2,4,null,5,6]
# Output: [1,3,5,6,2,4]

# Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
# Output: [1,2,3,6,7,11,14,4,8,12,5,9,13,10]


# 내가한거 


"""
# Definition for a Node.
class Node(object):
    def __init__(self, val=None, children=None):
        self.val = val
        self.children = children
"""
class Solution(object):
    def preorder(self, root):
        """
        :type root: Node
        :rtype: List[int]
        """
        lst = [root]
        result = []

        if root is None:
            return None

        while len(lst) !=0:

            target = lst.pop(0) # 큐에 처음꺼 꺼내기 
            result.append(target.val)  # 결과물에 해당 val 넣기 

            if len(target.children) != 0 :

                for i in range(0,len(target.children)) :

                    lst.insert(i, target.children[i])
        return result


# 마음에 드는 예제 
class Solution(object):
    def preorder(self, root):
        """
        :type root: Node
        :rtype: List[int]
        """
        if root is None:
            return []

        stack = [root]
        output = []

        while stack:
            temp = stack.pop()

            output.append(temp.val)
            stack.extend(temp.children[::-1]) # 전체를 거꾸로 뒤집기 
        return output


# 빠른 예제들
class Solution(object):
    def preorder(self, root):
        """
        :type root: Node
        :rtype: List[int]
        """
        if not root:
            return []
        stack = [root, ]
        result = []
        while stack:
            cur = stack.pop()
            result.append(cur.val)
            stack.extend(cur.children[::-1])
        return result


# 재귀 사용 
class Solution(object):
    def preorder(self, root):
        """
        :type root: Node
        :rtype: List[int]
        """
        output = []

        self.dfs(root, output)
        return output

    def dfs(self, root, output):
        
        # If root is none return 
        if root is None:
            return
        
        # for preorder we first add the root val
        output.append(root.val)
        
        # Then add all the children to the output
        for child in root.children:
            self.dfs(child, output)